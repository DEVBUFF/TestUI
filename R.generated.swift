//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    /// Color `MainBackgroundColor`.
    static let mainBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "MainBackgroundColor")
    /// Color `MainBlueColor`.
    static let mainBlueColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "MainBlueColor")
    /// Color `ProtectionOffColor`.
    static let protectionOffColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ProtectionOffColor")
    /// Color `ProtectionOnColor`.
    static let protectionOnColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ProtectionOnColor")
    /// Color `UnselectedButtonColor-1`.
    static let unselectedButtonColor1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "UnselectedButtonColor-1")
    /// Color `UnselectedButtonColor`.
    static let unselectedButtonColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "UnselectedButtonColor")
    /// Color `UnselectedTextColor`.
    static let unselectedTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "UnselectedTextColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MainBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MainBlueColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainBlueColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainBlueColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ProtectionOffColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func protectionOffColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.protectionOffColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ProtectionOnColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func protectionOnColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.protectionOnColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "UnselectedButtonColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func unselectedButtonColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.unselectedButtonColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "UnselectedButtonColor-1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func unselectedButtonColor1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.unselectedButtonColor1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "UnselectedTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func unselectedTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.unselectedTextColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 76 images.
  struct image {
    /// Image `AboutAsIcon`.
    static let aboutAsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AboutAsIcon")
    /// Image `AboutNavIcon`.
    static let aboutNavIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AboutNavIcon")
    /// Image `AboutUsInfo`.
    static let aboutUsInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "AboutUsInfo")
    /// Image `AboutUsLogo`.
    static let aboutUsLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "AboutUsLogo")
    /// Image `AcceptIcon`.
    static let acceptIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AcceptIcon")
    /// Image `AddDomainIcon`.
    static let addDomainIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddDomainIcon")
    /// Image `AddFilterAnnounceIcon`.
    static let addFilterAnnounceIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddFilterAnnounceIcon")
    /// Image `AddFilterCompleteIcon`.
    static let addFilterCompleteIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddFilterCompleteIcon")
    /// Image `AddFilterGlobIcon`.
    static let addFilterGlobIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddFilterGlobIcon")
    /// Image `AddFilterSocialIcon`.
    static let addFilterSocialIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddFilterSocialIcon")
    /// Image `AddFilterUltimateIcon`.
    static let addFilterUltimateIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddFilterUltimateIcon")
    /// Image `AddFiltersIcon-1`.
    static let addFiltersIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddFiltersIcon-1")
    /// Image `AddFiltersIcon`.
    static let addFiltersIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddFiltersIcon")
    /// Image `AntiCookieIcon`.
    static let antiCookieIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AntiCookieIcon")
    /// Image `AntiFontIcon`.
    static let antiFontIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AntiFontIcon")
    /// Image `AntiScanIcon`.
    static let antiScanIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AntiScanIcon")
    /// Image `AntiTrackingIcon-1`.
    static let antiTrackingIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "AntiTrackingIcon-1")
    /// Image `AntiTrackingIcon`.
    static let antiTrackingIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AntiTrackingIcon")
    /// Image `ArrowRight`.
    static let arrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowRight")
    /// Image `BackButton`.
    static let backButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackButton")
    /// Image `BigAddFiltersIcon`.
    static let bigAddFiltersIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BigAddFiltersIcon")
    /// Image `BigAntiTrackingIcon`.
    static let bigAntiTrackingIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BigAntiTrackingIcon")
    /// Image `BigSettingsIcon`.
    static let bigSettingsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BigSettingsIcon")
    /// Image `BlackListIcon`.
    static let blackListIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BlackListIcon")
    /// Image `BuskectIon`.
    static let buskectIon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BuskectIon")
    /// Image `BuyProImage`.
    static let buyProImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "BuyProImage")
    /// Image `ChevronesIcon`.
    static let chevronesIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ChevronesIcon")
    /// Image `CloseAddDomain`.
    static let closeAddDomain = Rswift.ImageResource(bundle: R.hostingBundle, name: "CloseAddDomain")
    /// Image `DeleteBlackListCell`.
    static let deleteBlackListCell = Rswift.ImageResource(bundle: R.hostingBundle, name: "DeleteBlackListCell")
    /// Image `DisableButtonIcon`.
    static let disableButtonIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "DisableButtonIcon")
    /// Image `EditBlackListCell`.
    static let editBlackListCell = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditBlackListCell")
    /// Image `EmptySearch`.
    static let emptySearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "EmptySearch")
    /// Image `Export`.
    static let export = Rswift.ImageResource(bundle: R.hostingBundle, name: "Export")
    /// Image `GoToBlockers`.
    static let goToBlockers = Rswift.ImageResource(bundle: R.hostingBundle, name: "GoToBlockers")
    /// Image `GoToSafari`.
    static let goToSafari = Rswift.ImageResource(bundle: R.hostingBundle, name: "GoToSafari")
    /// Image `GoToSettings`.
    static let goToSettings = Rswift.ImageResource(bundle: R.hostingBundle, name: "GoToSettings")
    /// Image `GoToTurnOn`.
    static let goToTurnOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "GoToTurnOn")
    /// Image `HowEnableExtension`.
    static let howEnableExtension = Rswift.ImageResource(bundle: R.hostingBundle, name: "HowEnableExtension")
    /// Image `Import`.
    static let `import` = Rswift.ImageResource(bundle: R.hostingBundle, name: "Import")
    /// Image `InstructionButtonIcon`.
    static let instructionButtonIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "InstructionButtonIcon")
    /// Image `LockIcon`.
    static let lockIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "LockIcon")
    /// Image `Logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo")
    /// Image `MalwareAlertImageCircle`.
    static let malwareAlertImageCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "MalwareAlertImageCircle")
    /// Image `MalwareAlertImage`.
    static let malwareAlertImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "MalwareAlertImage")
    /// Image `MalwareImage`.
    static let malwareImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "MalwareImage")
    /// Image `MalwareSuccess`.
    static let malwareSuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "MalwareSuccess")
    /// Image `NavBlackListIcon`.
    static let navBlackListIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "NavBlackListIcon")
    /// Image `NavPlusButton`.
    static let navPlusButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "NavPlusButton")
    /// Image `OffpageIcon`.
    static let offpageIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "OffpageIcon")
    /// Image `OkButton`.
    static let okButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "OkButton")
    /// Image `PageControlElips`.
    static let pageControlElips = Rswift.ImageResource(bundle: R.hostingBundle, name: "PageControlElips")
    /// Image `ProtectButtonIcon`.
    static let protectButtonIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProtectButtonIcon")
    /// Image `ProtectionOff`.
    static let protectionOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProtectionOff")
    /// Image `ProtectionOn`.
    static let protectionOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProtectionOn")
    /// Image `RightArrowDarkIcon`.
    static let rightArrowDarkIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "RightArrowDarkIcon")
    /// Image `SearchCancel`.
    static let searchCancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "SearchCancel")
    /// Image `SearchIconWhite`.
    static let searchIconWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "SearchIconWhite")
    /// Image `SearchIcon`.
    static let searchIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SearchIcon")
    /// Image `SettingsButton`.
    static let settingsButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingsButton")
    /// Image `SettingsIcon`.
    static let settingsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingsIcon")
    /// Image `SliderGunIcon`.
    static let sliderGunIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SliderGunIcon")
    /// Image `SliderKnifeIcon`.
    static let sliderKnifeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SliderKnifeIcon")
    /// Image `SliderShieldIcon`.
    static let sliderShieldIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SliderShieldIcon")
    /// Image `SliderThumbImage`.
    static let sliderThumbImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "SliderThumbImage")
    /// Image `SplashBackground`.
    static let splashBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "SplashBackground")
    /// Image `SubscriptionsBackground`.
    static let subscriptionsBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "SubscriptionsBackground")
    /// Image `SubscriptionsLighting`.
    static let subscriptionsLighting = Rswift.ImageResource(bundle: R.hostingBundle, name: "SubscriptionsLighting")
    /// Image `TurnOnIcon`.
    static let turnOnIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "TurnOnIcon")
    /// Image `TutorialConvert`.
    static let tutorialConvert = Rswift.ImageResource(bundle: R.hostingBundle, name: "TutorialConvert")
    /// Image `TutorialFlagDesc`.
    static let tutorialFlagDesc = Rswift.ImageResource(bundle: R.hostingBundle, name: "TutorialFlagDesc")
    /// Image `TutorialFlag`.
    static let tutorialFlag = Rswift.ImageResource(bundle: R.hostingBundle, name: "TutorialFlag")
    /// Image `TutorialIdiaDesc`.
    static let tutorialIdiaDesc = Rswift.ImageResource(bundle: R.hostingBundle, name: "TutorialIdiaDesc")
    /// Image `TutorialIdia`.
    static let tutorialIdia = Rswift.ImageResource(bundle: R.hostingBundle, name: "TutorialIdia")
    /// Image `WhiteDote`.
    static let whiteDote = Rswift.ImageResource(bundle: R.hostingBundle, name: "WhiteDote")
    /// Image `WhiteListIcon-1`.
    static let whiteListIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "WhiteListIcon-1")
    /// Image `WhiteListIcon`.
    static let whiteListIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "WhiteListIcon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AboutAsIcon", bundle: ..., traitCollection: ...)`
    static func aboutAsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutAsIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AboutNavIcon", bundle: ..., traitCollection: ...)`
    static func aboutNavIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutNavIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AboutUsInfo", bundle: ..., traitCollection: ...)`
    static func aboutUsInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutUsInfo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AboutUsLogo", bundle: ..., traitCollection: ...)`
    static func aboutUsLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutUsLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AcceptIcon", bundle: ..., traitCollection: ...)`
    static func acceptIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.acceptIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddDomainIcon", bundle: ..., traitCollection: ...)`
    static func addDomainIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addDomainIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddFilterAnnounceIcon", bundle: ..., traitCollection: ...)`
    static func addFilterAnnounceIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addFilterAnnounceIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddFilterCompleteIcon", bundle: ..., traitCollection: ...)`
    static func addFilterCompleteIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addFilterCompleteIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddFilterGlobIcon", bundle: ..., traitCollection: ...)`
    static func addFilterGlobIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addFilterGlobIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddFilterSocialIcon", bundle: ..., traitCollection: ...)`
    static func addFilterSocialIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addFilterSocialIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddFilterUltimateIcon", bundle: ..., traitCollection: ...)`
    static func addFilterUltimateIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addFilterUltimateIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddFiltersIcon", bundle: ..., traitCollection: ...)`
    static func addFiltersIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addFiltersIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddFiltersIcon-1", bundle: ..., traitCollection: ...)`
    static func addFiltersIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addFiltersIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AntiCookieIcon", bundle: ..., traitCollection: ...)`
    static func antiCookieIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.antiCookieIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AntiFontIcon", bundle: ..., traitCollection: ...)`
    static func antiFontIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.antiFontIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AntiScanIcon", bundle: ..., traitCollection: ...)`
    static func antiScanIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.antiScanIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AntiTrackingIcon", bundle: ..., traitCollection: ...)`
    static func antiTrackingIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.antiTrackingIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AntiTrackingIcon-1", bundle: ..., traitCollection: ...)`
    static func antiTrackingIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.antiTrackingIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ArrowRight", bundle: ..., traitCollection: ...)`
    static func arrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BackButton", bundle: ..., traitCollection: ...)`
    static func backButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BigAddFiltersIcon", bundle: ..., traitCollection: ...)`
    static func bigAddFiltersIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bigAddFiltersIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BigAntiTrackingIcon", bundle: ..., traitCollection: ...)`
    static func bigAntiTrackingIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bigAntiTrackingIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BigSettingsIcon", bundle: ..., traitCollection: ...)`
    static func bigSettingsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bigSettingsIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BlackListIcon", bundle: ..., traitCollection: ...)`
    static func blackListIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackListIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BuskectIon", bundle: ..., traitCollection: ...)`
    static func buskectIon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buskectIon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BuyProImage", bundle: ..., traitCollection: ...)`
    static func buyProImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buyProImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ChevronesIcon", bundle: ..., traitCollection: ...)`
    static func chevronesIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronesIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CloseAddDomain", bundle: ..., traitCollection: ...)`
    static func closeAddDomain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeAddDomain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DeleteBlackListCell", bundle: ..., traitCollection: ...)`
    static func deleteBlackListCell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteBlackListCell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DisableButtonIcon", bundle: ..., traitCollection: ...)`
    static func disableButtonIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.disableButtonIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditBlackListCell", bundle: ..., traitCollection: ...)`
    static func editBlackListCell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editBlackListCell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EmptySearch", bundle: ..., traitCollection: ...)`
    static func emptySearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptySearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Export", bundle: ..., traitCollection: ...)`
    static func export(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.export, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GoToBlockers", bundle: ..., traitCollection: ...)`
    static func goToBlockers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goToBlockers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GoToSafari", bundle: ..., traitCollection: ...)`
    static func goToSafari(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goToSafari, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GoToSettings", bundle: ..., traitCollection: ...)`
    static func goToSettings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goToSettings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GoToTurnOn", bundle: ..., traitCollection: ...)`
    static func goToTurnOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goToTurnOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HowEnableExtension", bundle: ..., traitCollection: ...)`
    static func howEnableExtension(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.howEnableExtension, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Import", bundle: ..., traitCollection: ...)`
    static func `import`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`import`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "InstructionButtonIcon", bundle: ..., traitCollection: ...)`
    static func instructionButtonIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instructionButtonIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LockIcon", bundle: ..., traitCollection: ...)`
    static func lockIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lockIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MalwareAlertImage", bundle: ..., traitCollection: ...)`
    static func malwareAlertImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.malwareAlertImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MalwareAlertImageCircle", bundle: ..., traitCollection: ...)`
    static func malwareAlertImageCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.malwareAlertImageCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MalwareImage", bundle: ..., traitCollection: ...)`
    static func malwareImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.malwareImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MalwareSuccess", bundle: ..., traitCollection: ...)`
    static func malwareSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.malwareSuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NavBlackListIcon", bundle: ..., traitCollection: ...)`
    static func navBlackListIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navBlackListIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NavPlusButton", bundle: ..., traitCollection: ...)`
    static func navPlusButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navPlusButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OffpageIcon", bundle: ..., traitCollection: ...)`
    static func offpageIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.offpageIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OkButton", bundle: ..., traitCollection: ...)`
    static func okButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.okButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PageControlElips", bundle: ..., traitCollection: ...)`
    static func pageControlElips(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pageControlElips, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProtectButtonIcon", bundle: ..., traitCollection: ...)`
    static func protectButtonIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.protectButtonIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProtectionOff", bundle: ..., traitCollection: ...)`
    static func protectionOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.protectionOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProtectionOn", bundle: ..., traitCollection: ...)`
    static func protectionOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.protectionOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RightArrowDarkIcon", bundle: ..., traitCollection: ...)`
    static func rightArrowDarkIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrowDarkIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SearchCancel", bundle: ..., traitCollection: ...)`
    static func searchCancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchCancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SearchIcon", bundle: ..., traitCollection: ...)`
    static func searchIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SearchIconWhite", bundle: ..., traitCollection: ...)`
    static func searchIconWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchIconWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SettingsButton", bundle: ..., traitCollection: ...)`
    static func settingsButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SettingsIcon", bundle: ..., traitCollection: ...)`
    static func settingsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SliderGunIcon", bundle: ..., traitCollection: ...)`
    static func sliderGunIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sliderGunIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SliderKnifeIcon", bundle: ..., traitCollection: ...)`
    static func sliderKnifeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sliderKnifeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SliderShieldIcon", bundle: ..., traitCollection: ...)`
    static func sliderShieldIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sliderShieldIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SliderThumbImage", bundle: ..., traitCollection: ...)`
    static func sliderThumbImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sliderThumbImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SplashBackground", bundle: ..., traitCollection: ...)`
    static func splashBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SubscriptionsBackground", bundle: ..., traitCollection: ...)`
    static func subscriptionsBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subscriptionsBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SubscriptionsLighting", bundle: ..., traitCollection: ...)`
    static func subscriptionsLighting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subscriptionsLighting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TurnOnIcon", bundle: ..., traitCollection: ...)`
    static func turnOnIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.turnOnIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TutorialConvert", bundle: ..., traitCollection: ...)`
    static func tutorialConvert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialConvert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TutorialFlag", bundle: ..., traitCollection: ...)`
    static func tutorialFlag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialFlag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TutorialFlagDesc", bundle: ..., traitCollection: ...)`
    static func tutorialFlagDesc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialFlagDesc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TutorialIdia", bundle: ..., traitCollection: ...)`
    static func tutorialIdia(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialIdia, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TutorialIdiaDesc", bundle: ..., traitCollection: ...)`
    static func tutorialIdiaDesc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialIdiaDesc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WhiteDote", bundle: ..., traitCollection: ...)`
    static func whiteDote(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whiteDote, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WhiteListIcon", bundle: ..., traitCollection: ...)`
    static func whiteListIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whiteListIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WhiteListIcon-1", bundle: ..., traitCollection: ...)`
    static func whiteListIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whiteListIcon1, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `AddFilterViewController`.
    static let addFilterViewController = _R.nib._AddFilterViewController()
    /// Nib `CustomNavigationView`.
    static let customNavigationView = _R.nib._CustomNavigationView()
    /// Nib `SettingsTapView`.
    static let settingsTapView = _R.nib._SettingsTapView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddFilterViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addFilterViewController) instead")
    static func addFilterViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addFilterViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomNavigationView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customNavigationView) instead")
    static func customNavigationView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customNavigationView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingsTapView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsTapView) instead")
    static func settingsTapView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsTapView)
    }
    #endif

    static func addFilterViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addFilterViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func customNavigationView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomNavigationView? {
      return R.nib.customNavigationView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomNavigationView
    }

    static func settingsTapView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTapView? {
      return R.nib.settingsTapView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTapView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddFilterViewController.validate()
      try _CustomNavigationView.validate()
      try _SettingsTapView.validate()
    }

    struct _AddFilterViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddFilterViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "BigAddFiltersIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BigAddFiltersIcon' is used in nib 'AddFilterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "InstructionButtonIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InstructionButtonIcon' is used in nib 'AddFilterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SplashBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SplashBackground' is used in nib 'AddFilterViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "MainBackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainBackgroundColor' is used in storyboard 'AddFilterViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CustomNavigationView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CustomNavigationView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomNavigationView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomNavigationView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "SearchIconWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SearchIconWhite' is used in nib 'CustomNavigationView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "MainBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainBlueColor' is used in storyboard 'CustomNavigationView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "ProtectionOnColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ProtectionOnColor' is used in storyboard 'CustomNavigationView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SettingsTapView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SettingsTapView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTapView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTapView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ArrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowRight' is used in nib 'SettingsTapView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "MainBackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainBackgroundColor' is used in storyboard 'SettingsTapView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "MainBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainBlueColor' is used in storyboard 'SettingsTapView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "UnselectedButtonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'UnselectedButtonColor' is used in storyboard 'SettingsTapView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "UnselectedButtonColor-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'UnselectedButtonColor-1' is used in storyboard 'SettingsTapView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
